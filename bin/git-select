#!/usr/bin/env node
'use strict';

var child = require('child_process');
var inquirer = require('inquirer');

var formatting = '%(HEAD)__SEP%(refname:short)__SEP%(color:red)%(objectname:short)%(color:reset) - %(color:yellow)%(contents:subject)%(color:reset) - %(color:blue)%(authorname)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset))';
var args = ['for-each-ref', '--sort=committerdate', 'refs/heads/', '--format=' + formatting];

var git = child.spawn('git', args, { cwd: process.cwd() });

var output = '';
var refs;

function writeOut(d) {
    var data = d.toString();
    process.stdout.write(data);
}

function writeOutErr(d) {
    var data = d.toString();
    process.stderr.write(data);
}

git.stdout.on('data', function (d) {
    var data = d.toString();
    output += data;
});

git.stderr.on('data', writeOutErr);

git.on('close', function (code, signal) {
    refs = output.split('\n').map(function (i) {
        return i.split('__SEP').reduce(function (sum, i, index) {
            if (index === 0) {
                sum.head = i;
            } else if (index === 1) {
                sum.name = i;
                sum.value = i;
                sum.short = i;
            } else if (index === 2) {
                sum.name += ' ' + i;
            }
            return sum;
        }, {});
    }).filter(function (i) {
        return i.value;
    });

    var branchNames = refs.map(function (i) {
        return i.name;
    });

    refs.push(new inquirer.Separator());
    refs.push({
        name: 'Add new branch'
    });
    var choices = refs.reverse();

    inquirer.prompt([{
        type: 'list',
        name: "name",
        message: "Choose a branch",
        default: 1,
        choices: choices
    }]).then(function (choice) {
        if (choice.name === 'Add new branch') {
            newBranch(branchNames);
        } else {
            gitSpawn(['checkout', choice.name]);
        }
    });
});

function gitSpawn(args) {
    return new Promise(function (resolve, reject) {
        var spawnedProcess = child.spawn('git', args, { cwd: process.cwd() });
        spawnedProcess.stdout.on('data', writeOut);
        spawnedProcess.stderr.on('data', writeOutErr);
        spawnedProcess.on('close', resolve);
    });
}

function newBranch(branchNames) {
    inquirer.prompt([{
        type: 'list',
        name: "name",
        message: "Choose a branch to branch from",
        choices: branchNames
    }]).then(function (branch) {
        inquirer.prompt([{
            type: 'input',
            name: "name",
            message: "Choose a name for your new branch"
        }]).then(function (choice) {
            inquirer.prompt([{
                type: 'confirm',
                name: "confirm",
                message: "Fetch and merge branch first?"
            }]).then(function (fetch) {
                if (fetch.confirm) {
                    gitSpawn(['fetch', 'origin', branch.name + ':' + branch.name]).then(function () {
                        gitSpawn(['checkout', '-b', choice.name, branch.name]);
                    });
                } else {
                    gitSpawn(['checkout', '-b', choice.name, branch.name]);
                }
            });
        });
    });
}
