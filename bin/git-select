#!/usr/bin/env node
'use strict';

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var child = require('child_process');
var inquirer = require('inquirer');
var chalk = require('chalk');
var moment = require('moment');

var jsonFormat = '{"head": %(HEAD), "refname": %(refname:short), "objectname": %(objectname:short), "subject": %(contents:subject), "author": %(authorname), "committerdate": %(committerdate)}';

function doGit(args) {
    return new Promise(function (resolve, reject) {
        var git = child.spawn('git', args, { cwd: process.cwd() });
        var output = '';
        git.stdout.on('data', function (data) {
            output += data.toString();
        });
        git.stdout.on('close', function () {
            resolve(output.toString().trim());
        });
        git.stderr.on('data', function (e) {
            process.stderr.write('There was a problem running "git ' + args.join(' ') + '": ' + e);
            reject(e);
        });
    });
}

function formatChoices(branch) {
    var formatted = {
        name: chalk.white('' + branch.refname),
        message: chalk.cyan('' + branch.subject.trim()),
        author: chalk.yellow('' + branch.author),
        date: chalk.blue('(' + moment(branch.committerdate).fromNow() + ')')
    };
    formatted.message = formatted.message.replace(/\n/g, ' ');
    branch.name = formatted.name + ' ' + formatted.message + ' ' + formatted.author + ' ' + formatted.date;
    return branch;
}

function getGitName() {
    return doGit(['config', 'user.name']);
}

function getHeads() {
    var args = ['for-each-ref', '--sort=committerdate', 'refs/heads/', '--format=' + jsonFormat, '--tcl'];
    return doGit(args).then(formatRefs);
}

function getRemotes() {
    var args = ['for-each-ref', '--sort=committerdate', 'refs/remotes/origin/', '--format=' + jsonFormat, '--tcl'];
    return doGit(args).then(formatRefs);
}

function absName(refname) {
    return refname.replace(/^heads\/origin\//, '').replace(/^remotes\/origin\//, '').replace(/^origin\//, '');
}

function writeOut(d) {
    var data = d.toString();
    process.stdout.write(data);
}

function writeOutErr(d) {
    var data = d.toString();
    process.stderr.write(data);
}

function formatRefs(output) {
    var ret = output.split('\n').map(function (i) {
        return JSON.parse(i);
    }).map(function (i) {
        return Object.assign(i, {
            displayName: absName(i.refname),
            committerdate: new Date(i.committerdate)
        });
    });
    return Promise.resolve(ret);
}

var byDate = function byDate(a, b) {
    return b.committerdate - a.committerdate;
};
var uniq = function uniq(value, index, self) {
    return self.indexOf(value) === index;
};

var promises = [getGitName(), getHeads(), getRemotes()];

Promise.all(promises).then(function (values) {
    var _values = slicedToArray(values, 3),
        gitName = _values[0],
        heads = _values[1],
        remotes = _values[2];

    var localBranches = heads.map(function (i) {
        return i.refname;
    });
    var myRemotes = remotes.filter(function (i) {
        return i.author === gitName;
    }).filter(function (i) {
        return !localBranches.includes(i.displayName);
    });
    var choices = heads.concat(myRemotes).sort(byDate);
    var formattedChoices = choices.map(formatChoices);

    var menu = formattedChoices.concat();

    menu.unshift(new inquirer.Separator());
    menu.unshift({
        name: 'Add new branch'
    });

    inquirer.prompt([{
        type: 'list',
        name: 'name',
        message: 'Choose a branch',
        default: 1,
        choices: menu
    }]).then(function (choice) {
        var chosen = formattedChoices.find(function (i) {
            return i.name === choice.name;
        });
        if (choice.name === 'Add new branch') {
            var branchChoices = heads.sort(byDate).map(function (i) {
                return absName(i.refname);
            }).filter(uniq);

            newBranch(branchChoices);
        } else {
            doGit(['checkout', chosen.displayName]).then(writeOut).catch(writeOutErr);
        }
    });
}).catch(writeOutErr);

function fetchPrompt(branch) {
    return inquirer.prompt([{
        type: 'confirm',
        name: 'confirm',
        message: 'Fetch and merge ' + branch.name + ' first? [git fetch origin ' + branch.name + ':' + branch.name + ']'
    }]).then(function (response) {
        return response.confirm;
    });
}

function branchNamePrompt() {
    return inquirer.prompt([{
        type: 'input',
        name: 'name',
        message: 'Choose a name for your new branch'
    }]);
}

function checkout(branch, choice) {
    return fetchPrompt(branch).then(function (confirm) {
        if (confirm) {
            doGit(['fetch', 'origin', branch.name + ':' + branch.name]).then(function () {
                doGit(['checkout', '-b', choice.name, branch.name]).catch(writeOutErr);
            }).catch(function (e) {
                checkout(branch);
            });
        } else {
            doGit(['checkout', '-b', choice.name, branch.name]).catch(writeOutErr);
        }
    }).catch(writeOutErr);
}

// TODO: tidy this up
function newBranch(branchNames) {
    inquirer.prompt([{
        type: 'list',
        name: 'name',
        message: 'Choose a branch to branch from',
        choices: branchNames
    }]).then(function (branch) {
        branchNamePrompt().then(function (choice) {
            checkout(branch, choice);
        });
    });
}
